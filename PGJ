import java.security.SecureRandom;

public class PasswordGenerator {
    private static final String LOWERCASE_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String NUMBERS = "0123456789";
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*()-_=+[]{}<>.,;:/?";

    public static void main(String[] args) {
        int length = 10; // Length of the generated password
        boolean includeLowercase = true; // Include lowercase characters?
        boolean includeUppercase = true; // Include uppercase characters?
        boolean includeNumbers = true; // Include numbers?
        boolean includeSpecialCharacters = true; // Include special characters?

        String password = generatePassword(length, includeLowercase, includeUppercase, includeNumbers, includeSpecialCharacters);
        System.out.println("Generated Password: " + password);
    }

    public static String generatePassword(int length, boolean includeLowercase, boolean includeUppercase,
                                          boolean includeNumbers, boolean includeSpecialCharacters) {
        StringBuilder password = new StringBuilder();
        SecureRandom random = new SecureRandom();

        // Create a character pool based on the selected options
        String characters = "";
        if (includeLowercase)
            characters += LOWERCASE_CHARACTERS;
        if (includeUppercase)
            characters += UPPERCASE_CHARACTERS;
        if (includeNumbers)
            characters += NUMBERS;
        if (includeSpecialCharacters)
            characters += SPECIAL_CHARACTERS;

        if (characters.isEmpty()) {
            System.out.println("No characters selected for password generation.");
            return "";
        }

        // Generate the password
        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(characters.length());
            password.append(characters.charAt(randomIndex));
        }

        return password.toString();
    }
}
